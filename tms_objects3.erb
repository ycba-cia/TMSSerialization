require 'rsolr'
require 'yaml'
require 'erb'
require 'tiny_tds'
require 'fileutils'
require 'mysql2'

start = Time.now

y = YAML.load_file("conn_info.yml")

tmshost = "172.18.60.89"
#tmsuser = "tmscob"
tmsuser = "nhp_2024"
tmspw = y["internpw"]
tmsdb = "lidoTMS"
tmsclient = TinyTds::Client.new(:username => tmsuser,
:password => tmspw,:host => tmshost,:database => tmsdb)

#puts "ACTIVE: #{tmsclient.active?}"
#puts "------"

oaihost = "oaipmh-dev-encrypt.ctsmybupmova.us-east-1.rds.amazonaws.com"
#oaiuser = "oaipmhuser"
oaiuser = "nhp_2024"
oaipw = y["internpw"]
oaidb = "oaipmh_erb"
oaiclient = Mysql2::Client.new(:host=>oaihost,:username=>oaiuser,:password=>oaipw,:database=>oaidb)

#puts "OAI ACTIVE: #{oaiclient.ping}"

#exit

solrpw = y["solrpw"]
solr = RSolr.connect :url => "https://admin:#{solrpw}@ciaindex2.britishart.yale.edu/solr/ycba_blacklight_dev"
response = solr.post "select", :params => {
    :fq=>"recordtype_ss:\"lido\" && has_image_ss:\"available\"",:wt=>"json", :sort=>"id desc", :fl=>"id",:rows=>100000
}
ids = Array.new
response['response']['docs'].each do |r|
  ids.push(r["id"].sub("tms:",""))
end
puts ids.size
#TEMPLATES
ts_lido_all = %q{
}

FileUtils.rm_rf('records')
FileUtils.mkdir('records')

#ITERATING THROUGH OBJECTS
objects_main_query = tmsclient.execute("SELECT * FROM [Coboat_ObjectsMainQuery]").each
#objects_main_query = tmsclient.execute("SELECT * FROM [Coboat_ObjectsMainQuery] where ObjectID in (22,6236,515)").each
#objects_main_query = tmsclient.execute("SELECT * FROM [Coboat_ObjectsMainQuery] where ObjectID in (61579,755,1491)").each
#objects_main_query = tmsclient.execute("SELECT * FROM [Coboat_ObjectsMainQuery] where ObjectID in (212,755)").each
#objects_main_query = tmsclient.execute("SELECT * FROM [Coboat_ObjectsMainQuery] where ObjectID in (1832,958,61579)").each
#objects_main_query = tmsclient.execute("SELECT * FROM [Coboat_ObjectsMainQuery] where ObjectID in (2145,7123,7)").each
#objects_main_query = tmsclient.execute("SELECT * FROM [Coboat_ObjectsMainQuery] where ObjectID in (6113,4999,586)").each
#objects_main_query = tmsclient.execute("SELECT * FROM [Coboat_ObjectsMainQuery] where ObjectID in (5011,8335,9,308,143,399)").each
#objects_main_query = tmsclient.execute("SELECT * FROM [Coboat_ObjectsMainQuery] where ObjectID in (64364,64962,280,8,144,757,123)").each
#objects_main_query = tmsclient.execute("SELECT * FROM [Coboat_ObjectsMainQuery] where ObjectID in (34,41109)").each
#22 - main test object
#6236 - DisplayStateEditionWrap - State - trial touched pr
#6236 - DisplayStateEditionWrap - Edition - First state, edition of 50 impressions.
#6236 - DisplayStateEditionWrap - CatRais - Hardie 259; Strange 122
#515 - QualifierMeasurements - Description - cxsd
#1491 Production nameActorSet/appellationValue - preferred - no display date - no prefix - unknown artist
#1491 Production nameActorSet/appellationValue - preferred With suffix - unknown artist
#61579 Production nameActorSet/appellationValue  -preferred - no display date - with prefix  -formerly unknown artist
#61579 Production nameActorSet/appellationValue - preferred- Without suffix  ALL
#61579 Production nameActorSet/appellationValue - preferred - with display date - with prefix -Rubens/Cosway
#755 Production nameActorSet/appellationValue - preferred - with display date - no prefix - Anthony Van Dyck
#755 vitalDatesActor/earliestDate & latestDate - exact
#212 vitalDatesActor/earliestDate & latestDate - estimate
#61579 attributionQualifierActor - Prefix - formerly
#1832 - Dated - not Dated - NULL
#1832 - earliestDate - no DateBegin - 0
#1832 - latestDate - no DateEnd - 0
#958 - Dated - undated 
#958 - earliestDate - no DateBegin - 0
#958 - latestDate - no DateEnd - 0
#61579 - Dated - undated
#61579 - earliestDate - DateBegin - 1602
#61579 - latestDate - DateEnd - 1799
#1832 - periodName - term - No Period  
#958 - periodName - term - Period - 19th century
#7123 - eventMaterialsTech - displayMaterial - MediumPS - NULL
#2145 - eventMaterialsTech - conceptID - SourceTermID - NULL
#7 - eventMaterialsTech - conceptID/term - Has all(colThesxrefType,UCTS,FinalST,term) 
#6113 - ExhTextEntries |t| - eventID - TextType - LUX exhibition
#4999 - ExhTextEntries |t| - eventID - TextType - ExhibitionURL
#586 - ExhVenuesAltName |an| - nameActorSet - appellationValue - AltVenueName - NULL
#ExhVenuesAltName |an| - nameActorSet - appellationValue - NameType - (No NULL -> NameType)
#if statement for ExhVenuesAltName |an| - nameActorSet - appellationValue - always occurs
#5011 - vitalDatesActor - earliestDate & latestDate - conBdate & conEdate
#8335 - eventDate - (displayDate,earliestDate,latestDate) - (VenueBegEndISO,VenueISObeginDate,VenueISOendDate)
#9 - ExhTextEntries |t| - displays eventDescriptionSet
#308 - attributionQualifierActor - PubCreatorSet |pc| - Prefix - Published by
# No DisplayBio in lido:TMS
#143 - multiple results for PubConLifeRole within roleActor
#5011 - test of multiple text entries, including non gallery label with event actors
#399 - ObjTEauthor4 |bh| - TextEntry - TextEntry Isn't NULL or ''
#64364 - TTypesort - output is 1
#64962 - TMstID != -1
#64962 - TTypesort - output is 1
#280 - TMstID != -1
#280 - TTypesort - output is 2
#8 - TMstID != -1
#8 - TTypesort - output is 3
#144 - TTypesort - output is 4
#757 - TMstID != -1
#757 - TTypesort - output is 5
#123 - TTypesort - output is 6
#34 - TextTypeID = 305
#41109 - No image for solr
puts "Number of Objects: #{objects_main_query.size}"
#All Hashes for views below
objectsH = Hash.new
objectNTJH = Hash.new
classificationsH = Hash.new
objectTitlesH = Hash.new
ownersH = Hash.new
objectAltNumsH = Hash.new
locationsH = Hash.new
objectDimElemH = Hash.new
objectDimH = Hash.new 
creatorSetH = Hash.new
conAltNumsH = Hash.new
conAltNamesH = Hash.new
conAttributesH = Hash.new
conLifeRoleH = Hash.new
objCultureH = Hash.new
objPeriodH = Hash.new
aatMediumTermsH = Hash.new
exhVenuesH = Hash.new
exhTextEntriesH = Hash.new
exhVenuesConAltNumsH = Hash.new
exhVenuesAltNameH = Hash.new
exhOrganizerH = Hash.new
exhConAltNumsH = Hash.new
exhConLocationH = Hash.new
bibcitationsH = Hash.new
bibaltNumsH = Hash.new
pubCreatorSetH = Hash.new
pubCreatorSetConAltNumsH = Hash.new
pubConLifeRoleH = Hash.new
ownerAltNameH = Hash.new 
objTEauthor3H = Hash.new
objTEauthor4H = Hash.new
aatKeywordsH = Hash.new
objRightsH = Hash.new
objTEeshopURL5H = Hash.new


  objectNTJ = tmsclient.execute("SELECT * FROM [Coboat_ObjectNTJ]")
#  m_objectWorkType = ERB.new(t_objectWorkType, trim_mode: "%<>")
  objectNTJ.each { |r1| 
    objectNTJH[r1["ID"]] = r1
  }

  classifications = tmsclient.execute("SELECT * FROM [Coboat_Classifications]")
#  m_classificationsWrap = ERB.new(t_classificationsWrap, trim_mode: "%<>")
  classifications.each { |r1|
    classificationsH[r1["ObjectID"]] = r1
  }

  objectTitles = tmsclient.execute("SELECT * FROM [Coboat_Objtitles]")
#  m_titleWrap = ERB.new(t_titleWrap, trim_mode: "%<>")
  objectTitles.each { |r1|
    objectTitlesH[r1["ObjectID"]] = r1
  }

  owners = tmsclient.execute("SELECT * FROM [Coboat_Owner]")
  owners.each { |r1|
    ownersH[r1["ID"]] = r1
  }

  objectAltNums = tmsclient.execute("SELECT * FROM [Coboat_ObjAltNums]")
  objectAltNums.each { |r1|
    objectAltNumsH[r1["ID"]] = r1
  }

  locations = tmsclient.execute("SELECT * FROM [Coboat_Locations]")
  locations.each { |r1|
    locationsH[r1["ID"]] = r1
    Publoc = r1["Publoc"]
    PositionHasData = r1["positionHasData"]
    Cup = r1["cup"]
    NumberHasData = r1["numberHasData"]
    Cun = r1["cun"]
    TypeHasData = r1["typeHasData"]
    Cut = r1["cut"]
    RoomHasData = r1["roomHasData"]
    Cr = r1["cr"]
    Cl = r1["cl"]
    LScurlocTrim = r1["LScurlocTrim"]
    CurSite = r1["CurSite"]
  }

  objectDimElem = tmsclient.execute("SELECT * FROM [Coboat_ObjDimElem]")
  objectDimElem.each { |r1|
    objectDimElemH[r1["ID"]] = r1
  }

  objectDim = tmsclient.execute("SELECT * FROM [Coboat_ObjDim]")
  objectDim.each { |r1|
    objectDimH[r1["ID"]] = r1
  }
  
  creatorSet = tmsclient.execute("SELECT * FROM [Coboat_CreatorSet2]")
  creatorSet.each { |r1| 
    creatorSetH[r1["ObjectID"]] = r1
  } 

  conAltNums = tmsclient.execute("SELECT * FROM [Coboat_ConAltNums]")
  conAltNums.each { |r1| 
    conAltNumsH[r1["ID"]] = r1 
  } 

  conAltNames = tmsclient.execute("SELECT * FROM [Coboat_ConAltNames]") 
  conAltNames.each { |r1| 
    conAltNamesH[r1["ID"]] = r1
  } 

  conAttributes = tmsclient.execute("SELECT * FROM [Coboat_ConAttributes]")
  conAttributes.each { |r1| 
    conAttributesH[r1["ID"]] = r1
  } 

  conLifeRole = tmsclient.execute("SELECT * FROM [Coboat_ConLifeRole]")
  conLifeRole.each { |r1| 
    conLifeRoleH[r1["ID"]] = r1
  } 

  objculture = tmsclient.execute("SELECT * FROM [Coboat_Objculture]")
  objculture.each { |r1| 
    objCultureH[r1["ID"]] = r1
  }  

  objperiod = tmsclient.execute("SELECT * FROM [Coboat_Objperiod]")
  objperiod.each { |r1| 
    objPeriodH[r1["ID"]] = r1 
  }  

  aatMediumTerms = tmsclient.execute("SELECT * FROM [Coboat_AATMediumTerms]")
  aatMediumTerms.each { |r1| 
    aatMediumTermsH[r1["ID"]] = r1
  }

  exhVenues = tmsclient.execute("SELECT * FROM [Coboat_ExhVenues]")
  exhVenues.each { |r1| 
    exhVenuesH[r1["ObjectID"]] = r1
  } 

  exhTextEntries = tmsclient.execute("SELECT * FROM [Coboat_ExhTextEntries]")
  exhTextEntries.each { |r1| 
    exhTextEntriesH[r1["ID"]] = r1
  }    

  exhVenuesConAltNums = tmsclient.execute("SELECT * FROM [Coboat_ExhVenuesConAltNums]")
  exhVenuesConAltNums.each { |r1|
    exhVenuesConAltNumsH[r1["ObjectID"]] = r1
  }

  exhVenuesAltName = tmsclient.execute("SELECT * FROM [Coboat_ExhVenuesAltName]")
  exhVenuesAltName.each { |r1|
    exhVenuesAltNameH[r1["ObjectID"]] = r1
  }

  exhOrganizer = tmsclient.execute("SELECT * FROM [Coboat_ExhOrganizer]")
  exhOrganizer.each { |r1|
    exhOrganizerH[r1["ObjectID"]] = r1
  }

  exhConAltNums = tmsclient.execute("SELECT * FROM [Coboat_ExhConAltNums]")
  exhConAltNums.each { |r1|
    exhConAltNumsH[r1["ObjectID"]] = r1
  }

  exhConLocation = tmsclient.execute("SELECT * FROM [Coboat_ExhConLocation]")
  exhConLocation.each { |r1|
    exhConLocationH[r1["ID"]] = r1
  }

  bibcitations = tmsclient.execute("SELECT * FROM [Coboat_BIBcitations2]")
  bibcitations.each { |r1|
    bibcitationsH[r1["ID"]] = r1
  }

  bibaltNums = tmsclient.execute("SELECT * FROM [Coboat_BIBaltNums]")
  bibaltNums.each { |r1|
    bibaltNumsH[r1["ID"]] = r1
  }

  pubCreatorSet = tmsclient.execute("SELECT * FROM [Coboat_PubCreatorSet2]")
  pubCreatorSet.each { |r1|
    PCAATCN = r1["AATCN"]
    PCAATID = r1["AATID"]
    pubCreatorSetH[r1["ObjectID"]] = r1
  }

  pubCreatorSetConAltNums = tmsclient.execute("SELECT * FROM [Coboat_PubCreatorSetConAltNums]")
  pubCreatorSetConAltNums.each { |r1|
    pubCreatorSetConAltNumsH[r1["ID"]] = r1
  }

  pubConLifeRole = tmsclient.execute("SELECT * FROM [Coboat_PubConLifeRole]")
  pubConLifeRole.each { |r1|
    pubConLifeRoleH[r1["ID"]] = r1
  }

  ownerAltName = tmsclient.execute("SELECT * FROM [Coboat_OwnerAltName]") 
  ownerAltName.each { |r1|
    ownerAltNameH[r1["ID"]] = r1
  }

  objTEauthor3 = tmsclient.execute("SELECT * FROM [Coboat_ObjTEauthor3]")
  objTEauthor3.each { |r1|
    objTEauthor3H[r1["ID"]] = r1
  }

  objTEauthor4 = tmsclient.execute("SELECT * FROM [Coboat_ObjTEauthor4]")
  objTEauthor4.each { |r1|
    objTEauthor4H[r1["ID"]] = r1
  }

  aatKeywords = tmsclient.execute("SELECT * FROM [Coboat_AATKeywords]")
  aatKeywords.each { |r1|
    aatKeywordsH[r1["ID"]] = r1
  }

  objRights = tmsclient.execute("SELECT * FROM [Coboat_Objrights]")
  objRights.each { |r1|
    objRightsH[r1["ObjectID"]] = r1
    Copyright = r1["copyright"]
    Source = r1["source"]
    STDright = r1["stdright"]
    Objtype2URI = r1["objtype2URI"]
  }

  objTEeshopURL5 = tmsclient.execute("SELECT * FROM [Coboat_ObjTEeshopURL5]")
  TextTypeID = ""
  objTEeshopURL5.each { |r1|
    objTEeshopURL5H[r1["objectID"]] = r1
    TextTypeID = r1["TextTypeID"]
    TextEntry = r1["TextEntry"]
  }


objects_main_query.each {|r|
#  m_lidoRecID = ERB.new(t_lidoRecID, trim_mode: "%<>")
  objectsH[r["ObjectID"]] = r
  ObjectID = r["ObjectID"]
  Inscribed = r["Inscribed"]
  Markings = r["Markings"]
  Lettering = r["Lettering"]
  Signed = r["Signed"]
  ObjNumType = r["ObjNumType"]
  ObjectNumber = r["ObjectNumber"]
  State = r["State"]
  Edition = r["Edition"]
  CatRais = r["CatRais"]
  Dated = r["Dated"] 
  DateBegin = r["DateBegin"] 
  DateEnd = r["DateEnd"] 
  MediumPS = r["MediumPS"] 
  CreditLineRepro = r["CreditLineRepro"]
  Objectlevel = r["objectlevel"]

#  m_inscriptionWrap = ERB.new(t_inscriptionsWrap, trim_mode: "%<>")
  
  m_lido_all = ERB.new(ts_lido_all, trim_mode: "%<>")


  #do remove this in favor of concac xml string and pushing to file and/or mysql
  #open('records/lido_'+ObjectID.to_s+'.xml', 'a') { |f|
    #f.puts m_lido_all.result.lines.reject{|line| line =~ /^[[:space:]]*$/}
  #}
  last_two_digits = ObjectID.to_i % 100
  subdir = "records/#{format('%02d', last_two_digits)}"
  Dir.mkdir(subdir) unless Dir.exist?(subdir)

  filename = "#{subdir}/lido_#{ObjectID}.xml"
  open(filename, 'a') do |f|
    f.puts m_lido_all.result.lines.reject { |line| line =~ /^[[:space:]]*$/ }
  end

  #sourcepath = "/Users/ermadmix/Documents/RubymineProjects/TMSSerialization/records/lido_"
  #insertquery = "INSERT INTO metadata_record (local_identifier,timestamp,xml) VALUES (\""+ObjectID.to_s+"\",now(),LOAD_FILE(\""+sourcepath+ObjectID.to_s+".txt\"))"
  #puts insertquery
  #oaiclient.query(insertquery)

  xml = ""
  xml.concat(m_lido_all.result.lines.reject{|line| line =~ /^[[:space:]]*$/}.to_s)
  #puts "--"
  #puts xml

}
#puts objects_main_query[0]["ObjectID"]
#puts "Hash: #{objectsH.inspect}"
puts "Hash count (objMain): #{objectsH.length}"

#puts "Hash : #{objectNTJH.inspect}"
puts "Hash count (objNTJ): #{objectNTJH.length}"

#puts "Hash: #{classificationsH.inspect}"
puts "Hash count (classifications): #{classificationsH.length}"

#puts "Hash: #{objectTitlesH.inspect}"
puts "Hash count (objTitles): #{objectTitlesH.length}"

#puts "Hash: #{ownersH.inspect}"
puts "Hash count (owners): #{ownersH.length}"

#puts "Hash: #{objectAltNumsH.inspect}"
puts "Hash count (objAltNums): #{objectAltNumsH.count}"

#puts "Hash: #{locationsH.inspect}"
puts "Hash count (locations): #{locationsH.count}"

#puts "Hash: #{objectDimElemH.inspect}"
puts "Hash count (objectDimElem): #{objectDimElemH.length}"

#puts "Hash: #{objectDimH.inspect}"
puts "Hash count (objectDim): #{objectDimH.length}"

#puts "Hash: #{creatorSetH.inspect}"
puts "Hash count (creatorSet): #{creatorSetH.length}"

#puts "Hash: #{conAltNumsH.inspect}"
puts "Hash count (conAltNums): #{conAltNumsH.length}"

#puts "Hash: #{conAltNamesH.inspect}"
puts "Hash count (conAltNames): #{conAltNamesH.length}"

#puts "Hash: #{conAttributesH.inspect}"
puts "Hash count (conAttributes): #{conAttributesH.length}"

#puts "Hash: #{conLifeRoleH.inspect}"
puts "Hash count (conLifeRole): #{conLifeRoleH.length}"

#puts "Hash: #{objCultureH.inspect}"
puts "Hash count (objCulture): #{objCultureH.length}"

#puts "Hash: #{objPeriodH.inspect}"
puts "Hash count (objPeriod): #{objPeriodH.length}"

#puts "Hash: #{aatMediumTermsH.inspect}"
puts "Hash count (aatMediumTerms): #{aatMediumTermsH.length}"

#puts "Hash: #{exhVenuesH.inspect}"
puts "Hash count (exhVenues): #{exhVenuesH.length}"

#puts "Hash: #{exhTextEntriesH.inspect}"
puts "Hash count (exhTextEntries): #{exhTextEntriesH.length}"

#puts "Hash: #{exhVenuesConAltNumsH.inspect}"
puts "Hash count (exhVenuesConAltNums): #{exhVenuesConAltNumsH.length}"

#puts "Hash: #{exhVenuesAltNameH.inspect}"
puts "Hash count (exhVenuesAltName): #{exhVenuesAltNameH.length}"

#puts "Hash: #{exhOrganizerH.inspect}"
puts "Hash count (exhOrganizer): #{exhOrganizerH.length}"

#puts "Hash: #{exhConAltNumsH.inspect}"
puts "Hash count (exhConAltNums): #{exhConAltNumsH.length}"

#puts "Hash: #{exhConLocationH.inspect}"
puts "Hash count (exhConLocation): #{exhConLocationH.length}"

#puts "Hash: #{bibcitationsH.inspect}"
puts "Hash count (bibcitations): #{bibcitationsH.length}"

#puts "Hash: #{bibaltNumsH.inspect}"
puts "Hash count (bibaltNums): #{bibaltNumsH.length}"

#puts "Hash: #{pubCreatorSetH.inspect}"
puts "Hash count (pubCreatorSet): #{pubCreatorSetH.length}"

#puts "Hash: #{pubCreatorSetConAltNumsH.inspect}"
puts "Hash count (pubCreatorSetConAltNums): #{pubCreatorSetConAltNumsH.length}"

#puts "Hash: #{pubConLifeRoleH.inspect}"
puts "Hash count (pubConLifeRole): #{pubConLifeRoleH.length}"

#puts "Hash: #{ownerAltNameH.inspect}"
puts "Hash count (ownerAltName): #{ownerAltNameH.length}"

#puts "Hash: #{objTEauthor3H.inspect}"
puts "Hash count (objTEauthor3): #{objTEauthor3H.length}"

#puts "Hash: #{objTEauthor4H.inspect}"
puts "Hash count (objTEauthor4): #{objTEauthor4H.length}"

#puts "Hash: #{aatKeywordsH.inspect}"
puts "Hash count (aatKeywords): #{aatKeywordsH.length}"

#puts "Hash: #{objRightsH.inspect}"
puts "Hash count (objRights): #{objRightsH.length}"

#puts "Hash: #{objTEeshopURL5H.inspect}"
puts "Hash count (objTEeshopURL5): #{objTEeshopURL5H.length}"

tmsclient.close
oaiclient.close

stop = Time.now
elapsed = "elapsed: #{(stop-start).to_s}"
puts ""
puts elapsed